#
# Allgemeine Grundkonfiguration des Gateway-Servers
# Vgl. https://www.devglan.com/spring-cloud/spring-cloud-gateway-example
#
spring.application.name: beispiel-apigate-gateway
server.port: 8088

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka
    register-with-eureka: true
  instance:
    preferIpAddress: true

hystrix.command.fallbackcmd.execution.isolation.thread.timeoutInMilliseconds: 2000
management.endpoints.web.exposure.include: hystrix.stream

#
# Konfiguration der URL-Weiterleitungen
# Vgl. https://spring.io/projects/spring-cloud-gateway#learn
#
# Jede Regel besitzt eine ID, die sie kennzeichnet und im Feld `uri` eine
# Zieladresse, an welche die Anfrage weitergeleitet wird. lb://xxx bedeutet
# dabei, dass der Service im Nameserver nachgeschlagen wird. Mit `predicates`
# können weitere Einschränkungen der gematchten HTTP-Anfragen vorgenommen
# werden. Mit `filters` hingegen können die weitergeleiteten HTTP-Anfragen
# umfangreich bearbeitet werden.
#
spring.cloud.gateway.routes:
    - id: backend1_hi
      uri: lb://beispiel-apigate-backend1
      predicates:
      - Path=/api/hi/**
      filters:
      - RewritePath=/api/hi/, /hi/
      - name: Hystrix
        args:
            name: hystrix
            fallbackUri: forward:/fallback/backend1/hi

    - id: backend1_bye
      uri: lb://beispiel-apigate-backend1
      predicates:
      - Path=/api/bye/**
      filters:
      - RewritePath=/api/bye/, /bye/
      - name: Hystrix
        args:
            name: hystrix
            fallbackUri: forward:/fallback/backend1/bye
            
    - id: backend2_greet_random
      uri: lb://beispiel-apigate-backend2
      predicates:
      - Path=/api/greet
      filters:
      - RewritePath=/api/greet, /greetRandom
      - name: Hystrix
        args:
            name: hystrix
            fallbackUri: forward:/fallback/backend2/greetRandom

 # Beispielhafte CORS-Konfiguration, um den Browsern den Aufruf des API-Gateways
 # zu erlauben, wenn die HTML-Seite von localhost:8079 geladen wurde.
 # Vgl. https://javarubberduck.com/java/cors-gateway/
spring.cloud.gateway.globalcors:
    corsConfigurations:
        '[/**]':
            allowedOrigins: "http://localhost:8079"
            allowedMethods:
                - GET
                - PUT
                - POST
                - PATCH
                - DELETE
                - OPTIONS
                - HEAD

    addToSimpleUrlHandlerMapping: true