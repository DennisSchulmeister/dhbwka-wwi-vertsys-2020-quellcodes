#
# Allgemeine Grundkonfiguration des Gateway-Servers
# Vgl. https://www.devglan.com/spring-cloud/spring-cloud-gateway-example
#
spring.application.name: NAAS-GATEWAY
server.port: 8080

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka
    register-with-eureka: true
  instance:
    preferIpAddress: true

hystrix.command.fallbackcmd.execution.isolation.thread.timeoutInMilliseconds: 2000
#management.endpoints.web.exposure.include: hystrix.stream

# Adresse des Admin-Servers
# Vgl. https://codecentric.github.io/spring-boot-admin/current/#spring-boot-admin-client
spring.boot.admin.client.url: http://localhost:8888
#spring.boot.admin.client.username
#spring.boot.admin.client.password

# Wirklich alle Monitoringendpunkte aktivieren
management.endpoints.web.exposure.include: "*"

# Log-Einträge auf Platte sichern, damit diese über die Monitoring Webservices
# abgerufen werden können und in der Admin-Oberfläche sichtbar sind
logging.file: ${user.home}/naas-gateway.log

#
# Konfiguration der URL-Weiterleitungen
# Vgl. https://spring.io/projects/spring-cloud-gateway#learn
#
# Jede Regel besitzt eine ID, die sie kennzeichnet und im Feld `uri` eine
# Zieladresse, an welche die Anfrage weitergeleitet wird. lb://xxx bedeutet
# dabei, dass der Service im Nameserver nachgeschlagen wird. Mit `predicates`
# können weitere Einschränkungen der gematchten HTTP-Anfragen vorgenommen
# werden. Mit `filters` hingegen können die weitergeleiteten HTTP-Anfragen
# umfangreich bearbeitet werden.
#

spring.cloud.gateway.routes:
    # Backend: Katalog
    - id: catalog_backend
      uri: lb://NAAS-CATALOG
      predicates:
      - Path=/api/catalog/**
      filters:
      - RewritePath=/api/catalog/, /
      
    # Backend: Ausleihe
    - id: lending_backend
      uri: lb://NAAS-LENDING
      predicates:
      - Path=/api/lending/**
      filters:
      - RewritePath=/api/lending/, /
      
 # CORS-Konfiguration, um den Browsern den Aufruf des API-Gateways zu erlauben,
 # wenn die HTML-Seite von localhost:8079 geladen wurde.
 # Vgl. https://javarubberduck.com/java/cors-gateway/
spring.cloud.gateway.globalcors:
    corsConfigurations:
        '[/**]':
            allowedOrigins: "http://localhost:8079"
            allowedMethods:
                - GET
                - PUT
                - POST
                - PATCH
                - DELETE
                - OPTIONS
                - HEAD
    addToSimpleUrlHandlerMapping: true